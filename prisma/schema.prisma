// Client generator
generator client {
  provider = "prisma-client-js"
}

// DB connection string
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Resume model
model Resume {
  id              String           @id @default(cuid())
  userId          String
  colorHex        String           @default("#000000")
  borderStyle     String           @default("squircle")
  title           String?
  description     String?
  photoUrl        String?
  summary         String?
  firstName       String?
  lastName        String?
  email           String?
  phone           String?
  address         String?
  city            String?
  state           String?
  country         String?
  jobTitle        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  workExperiences WorkExperience[]
  educations      Education[]
  certificates    Certificate[]
  projects        Project[]
  skills          String[]

  @@map("resumes")
  
}

// Work experience model
model WorkExperience {
  id          String    @id @default(cuid())
  position    String?
  company     String?
  location    String?
  startDate   DateTime?
  endDate     DateTime?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  resumeId    String
  resume      Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("work_experiences")
}

// Education model
model Education {
  id          String    @id @default(cuid())
  school      String?
  degree      String?
  startDate   DateTime?
  endDate     DateTime?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  resumeId    String
  resume      Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("educations")
}

model Project {
  id          String   @id @default(cuid())
  title       String?
  description String?
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  resumeId    String
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("projects")
}

// Certificate model
model Certificate {
  id          String   @id @default(cuid())
  title       String?
  authority   String?
  issueDate   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  resumeId    String
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("certificates")
}

// user Subscription model
model UserSubscription {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  stripeCustomerId        String   @unique
  stripeSubscriptionId    String   @unique
  stripePriceId           String
  stripeCurrentPeriodEnd  DateTime
  stripeCancelAtPeriodEnd Boolean  @default(false)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@map("user_subscriptions")
}
